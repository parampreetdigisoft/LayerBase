// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    return _getPlatformOptions();
  }

  static _getPlatformOptions() {
    return loadSecretKey();
  }

  static loadSecretKey() {
    if (kIsWeb) {
      return FirebaseOptions(
        apiKey: dotenv.env['web_apiKey'] ?? "",
        appId: dotenv.env['web_appId'] ?? "",
        messagingSenderId: dotenv.env['web_messagingSenderId'] ?? "",
        projectId: dotenv.env['web_projectId'] ?? "",
        authDomain: dotenv.env['web_authDomain'] ?? "",
        storageBucket: dotenv.env['web_storageBucket'] ?? "",
        measurementId: dotenv.env['web_measurementId'] ?? "",
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return FirebaseOptions(
          apiKey: dotenv.env['android_apiKey'] ?? "",
          appId: dotenv.env['android_appId'] ?? "",
          messagingSenderId: dotenv.env['android_messagingSenderId'] ?? "",
          projectId: dotenv.env['android_projectId'] ?? "",
          authDomain: dotenv.env['android_authDomain'] ?? "",
          storageBucket: dotenv.env['android_storageBucket'] ?? "",
          measurementId: dotenv.env['android_measurementId'] ?? "",
        );
      case TargetPlatform.iOS:
        return FirebaseOptions(
          apiKey: dotenv.env['ios_apiKey'] ?? "",
          appId: dotenv.env['ios_appId'] ?? "",
          messagingSenderId: dotenv.env['ios_messagingSenderId'] ?? "",
          projectId: dotenv.env['ios_projectId'] ?? "",
          authDomain: dotenv.env['ios_authDomain'] ?? "",
          storageBucket: dotenv.env['ios_storageBucket'] ?? "",
          measurementId: dotenv.env['ios_measurementId'] ?? "",
        );
      case TargetPlatform.macOS:
        return FirebaseOptions(
          apiKey: dotenv.env['macos_apiKey'] ?? "",
          appId: dotenv.env['macos_appId'] ?? "",
          messagingSenderId: dotenv.env['macos_messagingSenderId'] ?? "",
          projectId: dotenv.env['macos_projectId'] ?? "",
          authDomain: dotenv.env['macos_authDomain'] ?? "",
          storageBucket: dotenv.env['macos_storageBucket'] ?? "",
          measurementId: dotenv.env['macos_measurementId'] ?? "",
        );
      case TargetPlatform.windows:
        return FirebaseOptions(
          apiKey: dotenv.env['windows_apiKey'] ?? "",
          appId: dotenv.env['windows_appId'] ?? "",
          messagingSenderId: dotenv.env['windows_messagingSenderId'] ?? "",
          projectId: dotenv.env['windows_projectId'] ?? "",
          authDomain: dotenv.env['windows_authDomain'] ?? "",
          storageBucket: dotenv.env['windows_storageBucket'] ?? "",
          measurementId: dotenv.env['windows_measurementId'] ?? "",
        );

      case TargetPlatform.linux:
        return FirebaseOptions(
          apiKey: dotenv.env['windows_apiKey'] ?? "",
          appId: dotenv.env['windows_appId'] ?? "",
          messagingSenderId: dotenv.env['windows_messagingSenderId'] ?? "",
          projectId: dotenv.env['windows_projectId'] ?? "",
          authDomain: dotenv.env['windows_authDomain'] ?? "",
          storageBucket: dotenv.env['windows_storageBucket'] ?? "",
          measurementId: dotenv.env['windows_measurementId'] ?? "",
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }
}
